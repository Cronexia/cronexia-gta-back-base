// CLASSNAME_MAJ_FIRST REMOVE

// RELATION_MAJ_FIRST REMOVE
// RELATION_LOWC_FIRST REMOVE

import { ObjectType, Field, ID } from '@nestjs/graphql';
import { GraphQLDate } from 'graphql-scalars';

@ObjectType()
export class CLASSNAME_MAJ_FIRSTEntity {
  // * ðŸ‘· GraphQL Decorator template
  // @Field(() => Int, {
  //   defaultValue: 'any',
  //   deprecationReason: 'too old',
  //   description: 'Description to display in GraphQL',
  //   nullable: false,
  // })

  // * ðŸ¤– Fields without @Field will have it generated by Nest CLI

  // * Managed by Prisma
  @Field(() => ID, {
    name: 'idCLASSNAME_MAJ_FIRST',
    description: 'Unique ID',
    nullable: false,
  })
  idCLASSNAME_MAJ_FIRST: string;

  @Field(() => GraphQLDate, {
    name: 'createdAt',
    description: 'Date of creation',
    nullable: false,
  })
  createdAt: Date;

  @Field(() => GraphQLDate, {
    name: 'updatedAt',
    description: 'Date of last update',
    nullable: false,
  })
  updatedAt: Date;

  // * Cronexia mandatory
  createdBy: string;
  updatedBy?: string;

  // ---

  // * CLASSNAME_MAJ_FIRST

  // âœ¨ @unique

  @Field(() => String, {
    name: 'name',
    description: 'Name of the CLASSNAME_MAJ_FIRST. Must be unique.',
    nullable: false,
  })
  name: string;

  // ---

  // TODO: ðŸŒ± Replace String with ENUM
  @Field(() => String, {
    name: 'type',
    defaultValue: 'String',
    description:
      'Value type. Must be a be a basic one: String, Int, BigInt, Boolean, DateTime',
    nullable: false,
  })
  type: string;

  // ---

  // * ðŸ”— Relations

  //// Many to one / [0-N] ðŸ“¦ðŸ“¦ðŸ“¦
  ////      Virtual fields, not present in database
  //// RELATION_LOWC_FIRSTs RELATION_MAJ_FIRST[]

  // ---

  //// One to many / Only one ðŸ“¦
  ////      Virtual field, not present in database
  //// RELATION_LOWC_FIRST   RELATION_MAJ_FIRST @relation(fields: [RELATION_LOWC_FIRSTId], RELATION_LOWC_FIRSTs: [idRELATION_MAJ_FIRST])

  //// Only the scalar, present in database, as a foreign key
  // @Field(() => String, {
  //   name: 'RELATION_LOWC_FIRSTId',
  //   description: 'Foreign key to RELATION_MAJ_FIRST',
  //   nullable: true,
  //   nullable: false,
  // })
  // RELATION_LOWC_FIRSTId?: string;
  // RELATION_LOWC_FIRSTId: string;
}
