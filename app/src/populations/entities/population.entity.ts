import { ObjectType, Field, ID, registerEnumType } from '@nestjs/graphql';
import { GraphQLDate } from 'graphql-scalars';
import { IsDefined, IsEnum } from 'class-validator';

import { operatorLogicalEnum } from '../enums/operator-logical.enum';

@ObjectType()
export class PopulationEntity {
  constructor() {
    // ! ðŸ”¢ Dedicated ENUMs
    registerEnumType(operatorLogicalEnum, {
      name: 'operatorLogicalEnum',
      description: 'Supports only specific types: AND, OR, NOT',
      valuesMap: {
        AND: {
          description: 'AND type',
        },
        OR: {
          description: 'OR type',
        },
        NOT: {
          description: 'NOT type',
        },
      },
    });
  }

  // * ðŸ‘· GraphQL Decorator template
  // @Field(() => Int, {
  //   defaultValue: 'any',
  //   deprecationReason: 'too old',
  //   description: 'Description to display in GraphQL',
  //   nullable: false,
  // })

  // * ðŸ¤– Fields without @Field will have it generated by Nest CLI

  // * Managed by Prisma
  @Field(() => ID, {
    name: 'idPopulation',
    description: 'Unique ID',
    nullable: false,
  })
  idPopulation: string;

  @Field(() => GraphQLDate, {
    name: 'createdAt',
    description: 'Date of creation',
    nullable: false,
  })
  createdAt: Date;

  @Field(() => GraphQLDate, {
    name: 'updatedAt',
    description: 'Date of last update',
    nullable: false,
  })
  updatedAt: Date;

  // * Cronexia mandatory
  createdBy: string;
  updatedBy?: string;

  // ---

  // * Population

  // âœ¨ @unique

  @Field(() => String, {
    name: 'name',
    description: 'Name of the Population. Must be unique.',
    nullable: false,
  })
  name: string;

  // ---

  // TODO: ðŸŒ± Cannot determine a GraphQL output type for the "operatorLogical".
  // TODO: ðŸŒ± Make sure your class is decorated with an appropriate decorator.
  // @Field(() => operatorLogicalEnum, {
  @Field(() => String, {
    name: 'operatorLogical',
    description: 'Supports only specific types: AND, OR, NOT',
    nullable: false,
  })
  @IsDefined()
  @IsEnum(operatorLogicalEnum)
  operatorLogical: operatorLogicalEnum;

  // ---

  // * ðŸ”— Relations

  // Many to one / [0-N] ðŸ“¦ðŸ“¦ðŸ“¦
  //      Virtual fields, not present in database
  // popCriterias PopCriteria[]
}
